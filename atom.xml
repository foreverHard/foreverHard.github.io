<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-07-20T06:37:02.020Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Servlet</title>
    <link href="http://example.com/2021/07/20/Servlet/"/>
    <id>http://example.com/2021/07/20/Servlet/</id>
    <published>2021-07-20T06:36:20.000Z</published>
    <updated>2021-07-20T06:37:02.020Z</updated>
    
    <content type="html"><![CDATA[<h1 id="获取用户名和密码"><a href="#获取用户名和密码" class="headerlink" title="获取用户名和密码"></a>获取用户名和密码</h1><blockquote><p>继承HttpServlet类的子类中重写两个方法，doGet() 和 doPost()</p><p>doPost()方法中通过<code> request.getParameter()</code>来获取用户名和密码</p></blockquote><blockquote><p>每增加一个继承了HttpServlet的子类，在web.xml中就得新增映射</p></blockquote><p>继承了HttpServlet的子类getuser</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">getuser</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String username = req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        String pwd = req.getParameter(<span class="string">&quot;pwd&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;用户名：&quot;</span>+username);</span><br><span class="line">        System.out.println(<span class="string">&quot;密码：&quot;</span>+pwd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;getuser&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>web.xml配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>getuser<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.example.testCode.getuser<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>getuser<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/getuser<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="判断用户名和密码是否正确-暂时没连数据库"><a href="#判断用户名和密码是否正确-暂时没连数据库" class="headerlink" title="判断用户名和密码是否正确(暂时没连数据库)"></a>判断用户名和密码是否正确(暂时没连数据库)</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">getuser</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String username = req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        String pwd = req.getParameter(<span class="string">&quot;pwd&quot;</span>);</span><br><span class="line">        String html = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;admin&quot;</span>.equals(username) &amp;&amp; <span class="string">&quot;123&quot;</span>.equals(pwd))</span><br><span class="line">            html=<span class="string">&quot;&lt;h1&gt;successful&lt;/h1&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            html=<span class="string">&quot;&lt;h1&gt;fail&lt;/h1&gt;&quot;</span>;</span><br><span class="line">        PrintWriter printWriter = resp.getWriter();</span><br><span class="line">        printWriter.println(html);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Servlet调用流程"><a href="#Servlet调用流程" class="headerlink" title="Servlet调用流程"></a>Servlet调用流程</h1><ol><li>login.html:以post传参</li><li>表单数据提交到/login路径</li><li>进入web.xml找到对应的Servlet，定位到相应的类</li><li>实例化Servlet对象，进入Servlet类中发现没有实例存在，则调用类的无参构造方法实例化一个对象以备后续使用</li><li>调用doGet和doPost方法，根据表单传参方法进行函数调用</li><li>request获取参数，通过request.Parameter()获取</li><li>response设置相应：把html字符串设置在response对象上</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PrintWriter pw = response.getWriter();</span><br><span class="line">pw.println(html);</span><br></pre></td></tr></table></figure><p>​    8.tomcat吧html传递给浏览器</p><h1 id="service"><a href="#service" class="headerlink" title="service()"></a>service()</h1><h2 id="doGet-方法"><a href="#doGet-方法" class="headerlink" title="doGet()方法"></a>doGet()方法</h2><p>哪些是get方式：</p><ol><li>form默认提交方式</li><li>a标签访问</li><li>地址栏输入</li><li>ajax指定使用get方式</li></ol><h2 id="doPost-方法"><a href="#doPost-方法" class="headerlink" title="doPost()方法"></a>doPost()方法</h2><p>哪些是post方式：</p><ol><li>form表单设置为post</li><li>ajax指定post方式</li></ol><h2 id="service-1"><a href="#service-1" class="headerlink" title="service()"></a>service()</h2><p>在doGet和doPost方法之前，都会先执行service()方法，子类继承了HttpServlet，同时也继承了service()方法</p><h1 id="Servlet中文问题"><a href="#Servlet中文问题" class="headerlink" title="Servlet中文问题"></a>Servlet中文问题</h1><ul><li>现在html文件中加入一句话，告诉浏览器发送给服务器是使用UTF-8编码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在servlet中写入如下这句话，放在获取参数的语句之前</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>); <span class="comment">//设置编码方式</span></span><br></pre></td></tr></table></figure><ul><li>返回中文响应,设置 PrintWriter 对象之前</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.setContentType(<span class="string">&quot;text/html; charset=UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure><h1 id="Servlet生命周期"><a href="#Servlet生命周期" class="headerlink" title="Servlet生命周期"></a>Servlet生命周期</h1><ul><li>实例化：浏览器输入一个路径，对应的servlet被调用时，对应的Serlvet就会被实例化，自动调用该类构造方法，无论访问多少次，该构造方法只会在第一次访问时被调用，其余次数不管</li><li>初始化：子类继承HttpServlet中的init(ServletConfig)方法，与实例化一样，也只会执行一次</li><li>提供服务：service()方法，在这里编写我们的业务代码，通过浏览器的传参方式判断，调用doGet还是doPsot</li><li>销毁：destroy(),在web应用自动重启时，或者关系tomcat时会被调用</li><li>被回收：Servlet被销毁后，满足垃圾回收条件，当下一次垃圾回收来临时，就有可能被回收</li></ul><h1 id="Servlet跳转"><a href="#Servlet跳转" class="headerlink" title="Servlet跳转"></a>Servlet跳转</h1><h2 id="服务端跳转"><a href="#服务端跳转" class="headerlink" title="服务端跳转"></a>服务端跳转</h2><p>服务端跳转浏览器地址栏的路径不发生改变，还是原来的/login</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.getRequestDispatcher(<span class="string">&quot;success.html&quot;</span>).forward(request, response);</span><br></pre></td></tr></table></figure><h2 id="客户端跳转"><a href="#客户端跳转" class="headerlink" title="客户端跳转"></a>客户端跳转</h2><p>地址栏路径发生改变</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.sendRedirect(<span class="string">&quot;fail.html&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="服务端与客户端跳转原理"><a href="#服务端与客户端跳转原理" class="headerlink" title="服务端与客户端跳转原理"></a>服务端与客户端跳转原理</h2><p>服务端：服务器响应后在<strong>服务器</strong>内部访问网页，然后把网页内容提取出来发送给浏览器，浏览器进行展示</p><p>客户端：服务器发送一条特殊消息给浏览器让<strong>浏览器</strong>去访问某网页，然后服务端获取了某网页内容后发送给浏览器，浏览器进行展示</p><h1 id="Servlet自启动"><a href="#Servlet自启动" class="headerlink" title="Servlet自启动"></a>Servlet自启动</h1><p>解释：有时tomcat一启动就需要执行一些初始化代码，但是一些初始化代码只有在访问相应的路径以后才能执行，这时就需要自启动，来一开始就执行一些初始化代码</p><p>使用：</p><p>​        在web.xml中某个servlet中设置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>x<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span>//x表示启动顺序，x越小，优先级越高，相应的Servlet中的初始化代码越先被启动，在1~99之间，</span><br></pre></td></tr></table></figure><h1 id="request常见方法"><a href="#request常见方法" class="headerlink" title="request常见方法"></a>request常见方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">request.getRequestURL(): <span class="comment">//浏览器发出请求时的完整URL，包括协议 主机名 端口(如果有)&quot;</span></span><br><span class="line">request.getRequestURI(): <span class="comment">//浏览器发出请求的资源名部分，去掉了协议和主机名&quot;</span></span><br><span class="line">request.getQueryString():<span class="comment">// 请求行中的参数部分，只能显示以get方式发出的参数，post方式的看不到</span></span><br><span class="line">request.getRemoteAddr(): <span class="comment">//浏览器所处于的客户机的IP地址</span></span><br><span class="line">request.getRemoteHost(): <span class="comment">//浏览器所处于的客户机的主机名</span></span><br><span class="line">request.getRemotePort(): <span class="comment">//浏览器所处于的客户机使用的网络端口</span></span><br><span class="line">request.getLocalAddr(): <span class="comment">//服务器的IP地址</span></span><br><span class="line">request.getLocalName(): <span class="comment">//服务器的主机名</span></span><br><span class="line">request.getMethod(): <span class="comment">//得到客户机请求方式一般是GET或者POST</span></span><br></pre></td></tr></table></figure><h2 id="获取参数"><a href="#获取参数" class="headerlink" title="获取参数"></a>获取参数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">request.getParameter(): <span class="comment">//是常见的方法，用于获取单值的参数</span></span><br><span class="line">request.getParameterValues(): <span class="comment">//用于获取具有多值的参数，比如注册时候提交的 &quot;hobits&quot;，可以是多选的。</span></span><br><span class="line">request.getParameterMap(): <span class="comment">//用于遍历所有的参数，并返回Map类型。</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;获取单值参数name:&quot;</span> + request.getParameter(<span class="string">&quot;name&quot;</span>));<span class="comment">//获取单值参数name:2019083222</span></span><br><span class="line"></span><br><span class="line">       String[] hobits = request.getParameterValues(<span class="string">&quot;hobits&quot;</span>);<span class="comment">//获取具有多值的参数hobits: [lol, dota]</span></span><br><span class="line">       System.out.println(<span class="string">&quot;获取具有多值的参数hobits: &quot;</span> + Arrays.asList(hobits));</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">&quot;通过 getParameterMap 遍历所有的参数： &quot;</span>);</span><br><span class="line">       Map&lt;String, String[]&gt; parameters = request.getParameterMap();</span><br><span class="line">       System.out.println(<span class="string">&quot;************&quot;</span>);</span><br><span class="line">       System.out.println(parameters);</span><br><span class="line"></span><br><span class="line">       Set&lt;String&gt; paramNames = parameters.keySet();<span class="comment">//以数组形式获取key</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span> (String param : paramNames) &#123;</span><br><span class="line">           String[] value = parameters.get(param);</span><br><span class="line">           System.out.println(param + <span class="string">&quot;:&quot;</span> + Arrays.asList(value));<span class="comment">//name:[2019083222] hobits: [lol, dota]  </span></span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String,String[]&gt; parameters = req.getParameterMap();<span class="comment">//以键值对的形式存在</span></span><br><span class="line">Set&lt;String&gt; paramNames = parameters.keySet();<span class="comment">//以数组的形式获取所有的key</span></span><br><span class="line"><span class="keyword">for</span>(String m : paramNames)</span><br><span class="line">String[] value = parameters.get(m);<span class="comment">//获取键值对中,key对应的所有值</span></span><br></pre></td></tr></table></figure><h2 id="获取头信息"><a href="#获取头信息" class="headerlink" title="获取头信息"></a>获取头信息</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">request.getHeader() <span class="comment">//获取浏览器传递过来的头信息。比如getHeader(&quot;user-agent&quot;) 可以获取浏览器的基本资料，这样就能判断是firefox、IE、chrome、或者是safari浏览器</span></span><br><span class="line">request.getHeaderNames() <span class="comment">//获取浏览器所有的头信息名称，根据头信息名称就能遍历出所有的头信息</span></span><br></pre></td></tr></table></figure><h2 id="服务端传参"><a href="#服务端传参" class="headerlink" title="服务端传参"></a>服务端传参</h2><p>setAttribute和getAttribute用来在服务端跳转，不同的Servlet之间进行共享，在MVC章节细讲。</p><h1 id="response-用法"><a href="#response-用法" class="headerlink" title="response 用法"></a>response 用法</h1><h2 id="设置响应内容"><a href="#设置响应内容" class="headerlink" title="设置响应内容"></a>设置响应内容</h2><ul><li>通过response.getWriter()获取一个PrintWriter对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PrintWriter pw= response.getWriter();</span><br></pre></td></tr></table></figure><ul><li>可以使用println(),append(),write(),format()等等方法设置返回给浏览器的html内容。</li></ul><h2 id="设置相应格式"><a href="#设置相应格式" class="headerlink" title="设置相应格式"></a>设置相应格式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>“text/html” 是即格式 ，在request获取头信息 中对应的request.getHeader(“accept”).<br>“text/html” 是存在的，表示浏览器可以识别这种格式，如果换一个其他的格式， 比如 “text/lol” ，浏览器不能识别，那么打开此servlet就会弹出一个下载的对话框。</p><p>这样的手段也就常常用于实现下载功能</p></blockquote><h2 id="设置响应编码"><a href="#设置响应编码" class="headerlink" title="设置响应编码"></a>设置响应编码</h2><ol><li><p>```java<br>response.setContentType(“text/html; charset=UTF-8”);<br>//不仅发送到浏览器的内容会使用UTF-8编码，而且还通知浏览器使用UTF-8编码方式进行显示。所以总能正常显示中文</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. ```java</span><br><span class="line">   response.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class="line">   //仅仅是发送的浏览器的内容是UTF-8编码的，至于浏览器是用哪种编码方式显示不管。 所以当浏览器的显示编码方式不是UTF-8的时候，就会看到乱码，需要手动再进行一次设置。</span><br></pre></td></tr></table></figure></li><li><p>这两种方式都需要在response.getWriter调用之前执行才能生效。</p></li></ol><h2 id="设置不使用缓存"><a href="#设置不使用缓存" class="headerlink" title="设置不使用缓存"></a>设置不使用缓存</h2><blockquote><p>使用缓存可以加快页面的加载，降低服务端的负担。但是也可能看到过时的信息，可以通过如下手段通知浏览器不要使用缓存</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">response.setDateHeader(<span class="string">&quot;Expires&quot;</span>,<span class="number">0</span> );</span><br><span class="line">response.setHeader(<span class="string">&quot;Cache-Control&quot;</span>,<span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line">response.setHeader(<span class="string">&quot;pragma&quot;</span>,<span class="string">&quot;no-cache&quot;</span>);</span><br></pre></td></tr></table></figure><h1 id="Servlet上传文件-暂时不会"><a href="#Servlet上传文件-暂时不会" class="headerlink" title="Servlet上传文件(暂时不会)"></a>Servlet上传文件(暂时不会)</h1><p>注意：</p><ol><li>form必须是post，get不能上传文件，还需加<code>enctype=&quot;multipart/form-data&quot;</code>表示提交的数据是二进制文件</li><li>type必须为file</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;获取用户名和密码&quot;&gt;&lt;a href=&quot;#获取用户名和密码&quot; class=&quot;headerlink&quot; title=&quot;获取用户名和密码&quot;&gt;&lt;/a&gt;获取用户名和密码&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;继承HttpServlet类的子类中重写两个方法，doGet() </summary>
      
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="Servlet" scheme="http://example.com/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>某图书馆热门数据爬取</title>
    <link href="http://example.com/2021/07/19/%E6%9F%90%E5%9B%BE%E4%B9%A6%E9%A6%86%E7%83%AD%E9%97%A8%E6%95%B0%E6%8D%AE%E7%88%AC%E5%8F%96/"/>
    <id>http://example.com/2021/07/19/%E6%9F%90%E5%9B%BE%E4%B9%A6%E9%A6%86%E7%83%AD%E9%97%A8%E6%95%B0%E6%8D%AE%E7%88%AC%E5%8F%96/</id>
    <published>2021-07-19T11:45:21.000Z</published>
    <updated>2021-07-19T11:52:46.399Z</updated>
    
    <content type="html"><![CDATA[<h1 id="某图书馆热门数据爬取"><a href="#某图书馆热门数据爬取" class="headerlink" title="某图书馆热门数据爬取"></a>某图书馆热门数据爬取</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line">broswer = webdriver.Chrome()</span><br><span class="line">broswer.set_window_size(<span class="number">1400</span>, <span class="number">1400</span>)</span><br><span class="line">book = xlwt.Workbook(encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">sheet = book.add_sheet(<span class="string">&#x27;book&#x27;</span>)</span><br><span class="line">sheet.write(<span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;title&#x27;</span>)</span><br><span class="line">sheet.write(<span class="number">0</span>, <span class="number">1</span>, <span class="string">&#x27;author&#x27;</span>)</span><br><span class="line">sheet.write(<span class="number">0</span>, <span class="number">2</span>, <span class="string">&#x27;publish&#x27;</span>)</span><br><span class="line">sheet.write(<span class="number">0</span>, <span class="number">3</span>, <span class="string">&#x27;index&#x27;</span>)</span><br><span class="line">sheet.write(<span class="number">0</span>, <span class="number">4</span>, <span class="string">&#x27;times&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span>(<span class="params">soup</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">list</span> = soup.find(class_=<span class="string">&#x27;table_line&#x27;</span>).find_all(<span class="string">&#x27;tr&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">        title = item.find_all(<span class="string">&#x27;td&#x27;</span>)[<span class="number">1</span>].text</span><br><span class="line">        author = item.find_all(<span class="string">&#x27;td&#x27;</span>)[<span class="number">2</span>].text</span><br><span class="line">        publish = item.find_all(<span class="string">&#x27;td&#x27;</span>)[<span class="number">3</span>].text</span><br><span class="line">        index = item.find_all(<span class="string">&#x27;td&#x27;</span>)[<span class="number">4</span>].text</span><br><span class="line">        times = item.find_all(<span class="string">&#x27;td&#x27;</span>)[<span class="number">5</span>].text</span><br><span class="line">        <span class="keyword">global</span> n</span><br><span class="line">        sheet.write(n, <span class="number">0</span>, title)</span><br><span class="line">        sheet.write(n, <span class="number">1</span>, author)</span><br><span class="line">        sheet.write(n, <span class="number">2</span>, publish)</span><br><span class="line">        sheet.write(n, <span class="number">3</span>, index)</span><br><span class="line">        sheet.write(n, <span class="number">4</span>, times)</span><br><span class="line"></span><br><span class="line">        n = n+<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">next_page</span>():</span></span><br><span class="line">    broswer.get(<span class="string">&#x27;http://opac.hznu.edu.cn:8080/top/top_lend.php&#x27;</span>)</span><br><span class="line">    btn2 = broswer.find_element_by_xpath(<span class="string">&#x27;/html/body/div[3]/a[4]&#x27;</span>)</span><br><span class="line">    ActionChains(broswer).click(btn2).perform()</span><br><span class="line">    html = broswer.page_source</span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    search(soup)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">        next_page()</span><br><span class="line"></span><br><span class="line">main()</span><br><span class="line">book.save(<span class="string">&#x27;book.xlsx&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>纯课设需要，无商业用途</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;某图书馆热门数据爬取&quot;&gt;&lt;a href=&quot;#某图书馆热门数据爬取&quot; class=&quot;headerlink&quot; title=&quot;某图书馆热门数据爬取&quot;&gt;&lt;/a&gt;某图书馆热门数据爬取&lt;/h1&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;</summary>
      
    
    
    
    <category term="Python" scheme="http://example.com/categories/Python/"/>
    
    
    <category term="爬虫" scheme="http://example.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>yq数据爬取</title>
    <link href="http://example.com/2021/07/19/yq%E6%95%B0%E6%8D%AE%E7%88%AC%E5%8F%96/"/>
    <id>http://example.com/2021/07/19/yq%E6%95%B0%E6%8D%AE%E7%88%AC%E5%8F%96/</id>
    <published>2021-07-19T11:44:57.000Z</published>
    <updated>2021-07-19T11:53:09.331Z</updated>
    
    <content type="html"><![CDATA[<h1 id="yq数据爬取"><a href="#yq数据爬取" class="headerlink" title="yq数据爬取"></a>yq数据爬取</h1><blockquote><p>此网站CSS元素定期更新，若复制使用，则需写的新的CSS元素的定位，旧的定位可能用不了</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd<span class="comment">#数据框操作</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line"><span class="keyword">import</span> pyecharts</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">broswer = webdriver.Chrome()</span><br><span class="line">broswer.set_window_size(<span class="number">500</span>, <span class="number">500</span>)</span><br><span class="line">book = xlwt.Workbook(encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">sheet = book.add_sheet(<span class="string">&#x27;中国与全球疫情趋势&#x27;</span>)</span><br><span class="line">sheet.write(<span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;地区&#x27;</span>)</span><br><span class="line">sheet.write(<span class="number">0</span>, <span class="number">1</span>, <span class="string">&#x27;新增&#x27;</span>)</span><br><span class="line">sheet.write(<span class="number">0</span>, <span class="number">2</span>, <span class="string">&#x27;现有&#x27;</span>)</span><br><span class="line">sheet.write(<span class="number">0</span>, <span class="number">3</span>, <span class="string">&#x27;累计&#x27;</span>)</span><br><span class="line">sheet.write(<span class="number">0</span>, <span class="number">4</span>, <span class="string">&#x27;治愈&#x27;</span>)</span><br><span class="line">sheet.write(<span class="number">0</span>, <span class="number">5</span>, <span class="string">&#x27;死亡&#x27;</span>)</span><br><span class="line">n = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;def data_s(i):</span></span><br><span class="line"><span class="string">    wb = xlrd.open_workbook(&#x27;全国疫情趋势.xlsx&#x27;)  # 打开文件</span></span><br><span class="line"><span class="string">    sheet = wb.sheet_by_index(0)</span></span><br><span class="line"><span class="string">    cols = sheet.col_values(i)  # 获取新增</span></span><br><span class="line"><span class="string">    rows = sheet.col_values(0)  # 获取省份</span></span><br><span class="line"><span class="string">    dir = &#123;&#125;</span></span><br><span class="line"><span class="string">    for i in range(1, 35):</span></span><br><span class="line"><span class="string">        temp = rows[i]</span></span><br><span class="line"><span class="string">        dir[temp] = cols[i]</span></span><br><span class="line"><span class="string">    arr = list(dir.keys())</span></span><br><span class="line"><span class="string">    num = list(dir.values())</span></span><br><span class="line"><span class="string">    return arr,num&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;#柱形图</span></span><br><span class="line"><span class="string">def visual_bar():</span></span><br><span class="line"><span class="string">        s = [&#x27;&#x27;,&#x27;新增&#x27;,&#x27;现有&#x27;,&#x27;累计&#x27;,&#x27;治愈&#x27;,&#x27;死亡&#x27;]</span></span><br><span class="line"><span class="string">        for i in range(1,6):</span></span><br><span class="line"><span class="string">            arr,num = data_s(i)</span></span><br><span class="line"><span class="string">            bar = (Bar()</span></span><br><span class="line"><span class="string">                   .add_xaxis(arr)</span></span><br><span class="line"><span class="string">                   .add_yaxis(&#x27;&#x27;, num)</span></span><br><span class="line"><span class="string">                   )</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            bar.render(&#x27;%s.html&#x27;%(s[i]))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#饼状图现有人数最多的前10个省</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;def visual_pie():</span></span><br><span class="line"><span class="string">    arr , num = data_s(2)</span></span><br><span class="line"><span class="string">    pie = Pie(&quot;现有人数最多的10个省&quot;, &quot;现有人数&quot;)</span></span><br><span class="line"><span class="string">    pie.add(&quot;累计人数&quot;, arr, num)</span></span><br><span class="line"><span class="string">    pie.render(&#x27;现有人数最多的10个省.html&#x27;)#</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据获取加保存</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span>(<span class="params">soup</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">list</span> = soup.find(class_=<span class="string">&#x27;VirusTable_1-1-303_38pQEh&#x27;</span>).find_all(class_=<span class="string">&#x27;VirusTable_1-1-303_3m6Ybq&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">        diqu = item.find(class_=<span class="string">&#x27;VirusTable_1-1-303_AcDK7v&#x27;</span>).text</span><br><span class="line">        add1 = item.find_all(class_=<span class="string">&#x27;VirusTable_1-1-303_3x1sDV&#x27;</span>)[<span class="number">0</span>].text</span><br><span class="line">        xianyou = item.find_all(class_=<span class="string">&#x27;VirusTable_1-1-303_3x1sDV&#x27;</span>)[<span class="number">1</span>].text</span><br><span class="line">        leiji = item.find_all(class_=<span class="string">&#x27;VirusTable_1-1-303_3x1sDV&#x27;</span>)[<span class="number">2</span>].text</span><br><span class="line">        zhiyu = item.find_all(class_=<span class="string">&#x27;VirusTable_1-1-303_EjGi8c&#x27;</span>)[<span class="number">0</span>].text</span><br><span class="line">        siwang = item.find_all(class_=<span class="string">&#x27;VirusTable_1-1-303_EjGi8c&#x27;</span>)[<span class="number">1</span>].text</span><br><span class="line">        <span class="keyword">global</span> n</span><br><span class="line"></span><br><span class="line">        sheet.write(n, <span class="number">0</span>, diqu)</span><br><span class="line">        sheet.write(n, <span class="number">1</span>, add1)</span><br><span class="line">        sheet.write(n, <span class="number">2</span>, xianyou)</span><br><span class="line">        sheet.write(n, <span class="number">3</span>, leiji)</span><br><span class="line">        sheet.write(n, <span class="number">4</span>, zhiyu)</span><br><span class="line">        sheet.write(n, <span class="number">5</span>, siwang)</span><br><span class="line">        n = n+<span class="number">1</span></span><br><span class="line">        list1 = soup.find(class_=<span class="string">&#x27;VirusTable_1-1-303_3U6wJT&#x27;</span>).find_all(class_=<span class="string">&#x27;VirusTable_1-1-303_2AH4U9&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> list1:</span><br><span class="line">        diqu1 = item.find(class_=<span class="string">&#x27;VirusTable_1-1-303_AcDK7v&#x27;</span>).text</span><br><span class="line">        add11 = item.find_all(<span class="string">&#x27;td&#x27;</span>)[<span class="number">1</span>].text</span><br><span class="line">        leiji1 = <span class="built_in">int</span>(item.find_all(<span class="string">&#x27;td&#x27;</span>)[<span class="number">2</span>].text)</span><br><span class="line">        zhiyu1 = <span class="built_in">int</span>(item.find_all(<span class="string">&#x27;td&#x27;</span>)[<span class="number">3</span>].text)</span><br><span class="line">        xianyou1 = leiji1 - zhiyu1</span><br><span class="line">        siwang1 = item.find_all(<span class="string">&#x27;td&#x27;</span>)[<span class="number">4</span>].text</span><br><span class="line"></span><br><span class="line">        sheet.write(n, <span class="number">0</span>, diqu1)</span><br><span class="line">        sheet.write(n, <span class="number">1</span>, add11)</span><br><span class="line">        sheet.write(n, <span class="number">2</span>, xianyou1)</span><br><span class="line">        sheet.write(n, <span class="number">3</span>, leiji1)</span><br><span class="line">        sheet.write(n, <span class="number">4</span>, zhiyu1)</span><br><span class="line">        sheet.write(n, <span class="number">5</span>, siwang1)</span><br><span class="line">        n = n + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    broswer.get(<span class="string">&#x27;https://voice.baidu.com/act/newpneumonia/newpneumonia/?from=osari_aladin_banner&#x27;</span>)</span><br><span class="line">    btn1 = broswer.find_element_by_xpath(<span class="string">&#x27;/html/body/div[2]/div/div/div/section/div[2]/div[4]/div[3]/div[4]/div&#x27;</span>)</span><br><span class="line">    ActionChains(broswer).click(btn1).perform()</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    btn2 = broswer.find_element_by_xpath(<span class="string">&#x27;/html/body/div[2]/div/div/div/section/div[2]/div[4]/div[3]/div[11]/div&#x27;</span>)</span><br><span class="line">    ActionChains(broswer).click(btn2).perform()</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    html = broswer.page_source</span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    search(soup)</span><br><span class="line">    book.save(<span class="string">&#x27;全国疫情趋势.xlsx&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;yq数据爬取&quot;&gt;&lt;a href=&quot;#yq数据爬取&quot; class=&quot;headerlink&quot; title=&quot;yq数据爬取&quot;&gt;&lt;/a&gt;yq数据爬取&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;此网站CSS元素定期更新，若复制使用，则需写的新的CSS元素的定位，旧的定位可能用</summary>
      
    
    
    
    <category term="Python" scheme="http://example.com/categories/Python/"/>
    
    
    <category term="爬虫" scheme="http://example.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>修饰符</title>
    <link href="http://example.com/2021/07/19/%E4%BF%AE%E9%A5%B0%E7%AC%A6/"/>
    <id>http://example.com/2021/07/19/%E4%BF%AE%E9%A5%B0%E7%AC%A6/</id>
    <published>2021-07-19T11:32:05.000Z</published>
    <updated>2021-07-19T11:35:46.794Z</updated>
    
    <content type="html"><![CDATA[<h3 id="final"><a href="#final" class="headerlink" title="final"></a>final</h3><ul><li>final修饰的类不能被继承</li><li>final定义的方法不能被重写</li><li>final定义的常量不能被重写赋值</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;final&quot;&gt;&lt;a href=&quot;#final&quot; class=&quot;headerlink&quot; title=&quot;final&quot;&gt;&lt;/a&gt;final&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;final修饰的类不能被继承&lt;/li&gt;
&lt;li&gt;final定义的方法不能被重写&lt;/li&gt;
&lt;li&gt;fin</summary>
      
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="JavaSe" scheme="http://example.com/tags/JavaSe/"/>
    
  </entry>
  
  <entry>
    <title>数组</title>
    <link href="http://example.com/2021/07/19/%E6%95%B0%E7%BB%84/"/>
    <id>http://example.com/2021/07/19/%E6%95%B0%E7%BB%84/</id>
    <published>2021-07-19T11:31:55.000Z</published>
    <updated>2021-07-19T11:35:28.555Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><ol><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a;<span class="comment">//此处只是声明了一个数组，但是没有创建</span></span><br></pre></td></tr></table></figure></li><li><p>```java<br>new [5];//此处创建了数组但是没有引用对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">3. ```java</span><br><span class="line">   int[] a = new [5];//引用+创建</span><br></pre></td></tr></table></figure></li><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="comment">//方式1 分配空间与赋值分步进行</span></span><br><span class="line"> <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>]; </span><br><span class="line">a[<span class="number">0</span>] = <span class="number">100</span>;</span><br><span class="line">        a[<span class="number">1</span>] = <span class="number">101</span>;</span><br><span class="line">        a[<span class="number">2</span>] = <span class="number">103</span>;</span><br><span class="line">        a[<span class="number">3</span>] = <span class="number">120</span>;</span><br><span class="line">        a[<span class="number">4</span>] = <span class="number">140</span>;</span><br><span class="line"><span class="comment">//方式2 分配空间，同时赋值</span></span><br><span class="line"><span class="comment">//写法一： 分配空间同时赋值</span></span><br><span class="line">        <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">100</span>,<span class="number">102</span>,<span class="number">444</span>,<span class="number">836</span>,<span class="number">3236</span>&#125;;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//写法二： 省略了new int[],效果一样</span></span><br><span class="line">        <span class="keyword">int</span>[] b = &#123;<span class="number">100</span>,<span class="number">102</span>,<span class="number">444</span>,<span class="number">836</span>,<span class="number">3236</span>&#125;;</span><br><span class="line">        <span class="comment">//写法三（错误写法）：同时分配空间，和指定内容</span></span><br><span class="line">        <span class="comment">//在这个例子里，长度是3，内容是5个，产生矛盾了</span></span><br><span class="line">        <span class="comment">//所以如果指定了数组的内容，就不能同时设置数组的长度</span></span><br><span class="line">       <span class="keyword">int</span>[] c = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>]&#123;<span class="number">100</span>,<span class="number">102</span>,<span class="number">444</span>,<span class="number">836</span>,<span class="number">3236</span>&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>```java<br>//二维数组<br> //初始化二维数组，</p><pre><code>   int[][] a = new int[2][3];</code></pre><p>//只分配了二维数组</p><pre><code>   int[][] b = new int[2][]; //有两个一维数组，每个一维数组的长度暂未分配   b[0]  =new int[3];</code></pre><p> //指定内容的同时，分配空间</p><pre><code>   int[][] c = new int[][]&#123;           &#123;1,2,4&#125;,           &#123;4,5&#125;,           &#123;6,7,8,9&#125;   &#125;;</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### Arrays</span><br><span class="line"></span><br><span class="line">1. </span><br><span class="line"></span><br><span class="line">   ```java</span><br><span class="line">   //Arrays 数组复制Arrays.copyOfRange</span><br><span class="line">    int a[] = new int[] &#123; 18, 62, 68, 82, 65, 9 &#125;;</span><br><span class="line">    </span><br><span class="line">           // copyOfRange(int[] original, int from, int to)</span><br><span class="line">           // 第一个参数表示源数组</span><br><span class="line">           // 第二个参数表示开始位置(取得到)</span><br><span class="line">           // 第三个参数表示结束位置(取不到)</span><br><span class="line">           int[] b = Arrays.copyOfRange(a, 0, 3);</span><br></pre></td></tr></table></figure></li><li><p>```java<br>//Arrays 转化为字符串Arrays.toString</p><pre><code> int a[] = new int[] &#123; 18, 62, 68, 82, 65, 9 &#125;;    String content = Arrays.toString(a);    System.out.println(content);</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">3. ```java</span><br><span class="line">   //Arrays 排序Arrays.toString</span><br><span class="line">           int a[] = new int[] &#123; 18, 62, 68, 82, 65, 9 &#125;;</span><br><span class="line">           System.out.println(&quot;排序之前 :&quot;);</span><br><span class="line">           System.out.println(Arrays.toString(a));</span><br><span class="line">           Arrays.sort(a);</span><br><span class="line">           System.out.println(&quot;排序之后:&quot;);</span><br><span class="line">           System.out.println(Arrays.toString(a));</span><br></pre></td></tr></table></figure></li><li><p>```java<br>//Arrays 搜索Arrays.binarySearch<br>System.out.println(“数字 62出现的位置:”+Arrays.binarySearch(a, 62));</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">5. ```java</span><br><span class="line">   //Arrays 判断是否相同Arrays.equals</span><br><span class="line">      int a[] = new int[] &#123; 18, 62, 68, 82, 65, 9 &#125;;</span><br><span class="line">           int b[] = new int[] &#123; 18, 62, 68, 82, 65, 8 &#125;;</span><br><span class="line">    </span><br><span class="line">           System.out.println(Arrays.equals(a, b));</span><br></pre></td></tr></table></figure></li><li><pre><code class="java">//Arrays 填充 Arrays.fill(a, 5);</code></pre></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; title=&quot;数组&quot;&gt;&lt;/a&gt;数组&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr</summary>
      
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="JavaSe" scheme="http://example.com/tags/JavaSe/"/>
    
  </entry>
  
  <entry>
    <title>数字与字符串</title>
    <link href="http://example.com/2021/07/19/%E6%95%B0%E5%AD%97%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://example.com/2021/07/19/%E6%95%B0%E5%AD%97%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2021-07-19T11:31:45.000Z</published>
    <updated>2021-07-19T11:35:09.139Z</updated>
    
    <content type="html"><![CDATA[<h3 id="封装类"><a href="#封装类" class="headerlink" title="封装类"></a>封装类</h3><p>所有的基本类型都有对应的类类型，eg: int–&gt;Integer</p><ul><li>基本类型转封装类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//基本类型转换成封装类型</span></span><br><span class="line">       Integer it = <span class="keyword">new</span> Integer(i);</span><br></pre></td></tr></table></figure><ul><li>封装类转基本类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line"> </span><br><span class="line">     <span class="comment">//基本类型转换成封装类型</span></span><br><span class="line">     Integer it = <span class="keyword">new</span> Integer(i);</span><br><span class="line">      </span><br><span class="line">     <span class="comment">//封装类型转换成基本类型</span></span><br><span class="line">     <span class="keyword">int</span> i2 = it.intValue();</span><br></pre></td></tr></table></figure><h3 id="自动装箱"><a href="#自动装箱" class="headerlink" title="自动装箱"></a>自动装箱</h3><h4 id="装箱"><a href="#装箱" class="headerlink" title="装箱"></a>装箱</h4><p>​        自动把基本类型转换为类类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//基本类型转换成封装类型</span></span><br><span class="line">      Integer it = <span class="keyword">new</span> Integer(i);</span><br><span class="line">       </span><br><span class="line">      <span class="comment">//自动转换就叫装箱</span></span><br><span class="line">      Integer it2 = i;</span><br></pre></td></tr></table></figure><h4 id="自动拆箱"><a href="#自动拆箱" class="headerlink" title="自动拆箱"></a>自动拆箱</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">      Integer it = <span class="keyword">new</span> Integer(i);</span><br><span class="line">        </span><br><span class="line">      <span class="comment">//封装类型转换成基本类型</span></span><br><span class="line">      <span class="keyword">int</span> i2 = it.intValue();</span><br><span class="line">       </span><br><span class="line">      <span class="comment">//自动转换就叫拆箱</span></span><br><span class="line">      <span class="keyword">int</span> i3 = it;</span><br></pre></td></tr></table></figure><h3 id="操作字符串"><a href="#操作字符串" class="headerlink" title="操作字符串"></a>操作字符串</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">charAt获取字符</span><br><span class="line">toCharArray获取对应的字符数组</span><br><span class="line">subString截取子字符串</span><br><span class="line">split分隔</span><br><span class="line">trim去掉首尾空格</span><br><span class="line">toLowerCase</span><br><span class="line">toUpperCase大小写</span><br><span class="line">indexOf</span><br><span class="line">lastIndexOf</span><br><span class="line">contains定位</span><br><span class="line">replaceAll</span><br><span class="line">replaceFirst替换</span><br></pre></td></tr></table></figure><h3 id="比较字符串"><a href="#比较字符串" class="headerlink" title="比较字符串"></a>比较字符串</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> String str1 = <span class="string">&quot;the light&quot;</span>;</span><br><span class="line">         </span><br><span class="line">        String str2 = <span class="keyword">new</span> String(str1);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//==用于判断是否是同一个字符串对象</span></span><br><span class="line">        System.out.println( str1  ==  str2);</span><br><span class="line">------------------------------------------------</span><br><span class="line">    String str1 = <span class="string">&quot;the light&quot;</span>;</span><br><span class="line">        String str3 = <span class="string">&quot;the light&quot;</span>;</span><br><span class="line">        System.out.println( str1  ==  str3);</span><br><span class="line"></span><br><span class="line">------------------------------------------------</span><br><span class="line">使用equals进行字符串内容的比较，必须大小写一致</span><br><span class="line">equalsIgnoreCase，忽略大小写判断内容是否一致</span><br><span class="line">    </span><br><span class="line"> ------------------------------------------------</span><br><span class="line">    String str1 = <span class="string">&quot;the light&quot;</span>;</span><br><span class="line">         </span><br><span class="line">        String start = <span class="string">&quot;the&quot;</span>;</span><br><span class="line">        String end = <span class="string">&quot;Ight&quot;</span>;</span><br><span class="line">         </span><br><span class="line">        System.out.println(str1.startsWith(start));<span class="comment">//以...开始</span></span><br><span class="line">        System.out.println(str1.endsWith(end));<span class="comment">//以...结束</span></span><br></pre></td></tr></table></figure><blockquote><p><a href="https://how2j.cn/stage/12.html">https://how2j.cn/stage/12.html</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;封装类&quot;&gt;&lt;a href=&quot;#封装类&quot; class=&quot;headerlink&quot; title=&quot;封装类&quot;&gt;&lt;/a&gt;封装类&lt;/h3&gt;&lt;p&gt;所有的基本类型都有对应的类类型，eg: int–&amp;gt;Integer&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基本类型转封装类&lt;/li&gt;
&lt;/u</summary>
      
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="JavaSe" scheme="http://example.com/tags/JavaSe/"/>
    
  </entry>
  
  <entry>
    <title>操作符</title>
    <link href="http://example.com/2021/07/19/%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    <id>http://example.com/2021/07/19/%E6%93%8D%E4%BD%9C%E7%AC%A6/</id>
    <published>2021-07-19T11:31:11.000Z</published>
    <updated>2021-07-19T11:34:39.499Z</updated>
    
    <content type="html"><![CDATA[<h3 id="表达式-值1-值2"><a href="#表达式-值1-值2" class="headerlink" title="表达式?值1:值2"></a>表达式?值1:值2</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">6</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">int</span> k = i &lt; j ? <span class="number">99</span> : <span class="number">88</span>; </span><br><span class="line"><span class="comment">// 相当于</span></span><br><span class="line">        <span class="keyword">if</span> (i&lt; j) &#123;</span><br><span class="line">            k = <span class="number">99</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            k = <span class="number">88</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>满足条件执行值1，不满足执行值2</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;表达式-值1-值2&quot;&gt;&lt;a href=&quot;#表达式-值1-值2&quot; class=&quot;headerlink&quot; title=&quot;表达式?值1:值2&quot;&gt;&lt;/a&gt;表达式?值1:值2&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td</summary>
      
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="JavaSe" scheme="http://example.com/tags/JavaSe/"/>
    
  </entry>
  
  <entry>
    <title>变量</title>
    <link href="http://example.com/2021/07/19/%E5%8F%98%E9%87%8F/"/>
    <id>http://example.com/2021/07/19/%E5%8F%98%E9%87%8F/</id>
    <published>2021-07-19T11:31:00.000Z</published>
    <updated>2021-07-19T11:33:53.992Z</updated>
    
    <content type="html"><![CDATA[<h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><ul><li>小转大可以，大转小有时需要强转</li><li>大转小需要强制类型转换</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> i = (<span class="keyword">int</span>) a;  </span><br></pre></td></tr></table></figure><h2 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h2><ul><li>变量命名只能是 字母 、数字、$ 、_</li><li>开头不能是数字</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;类型转换&quot;&gt;&lt;a href=&quot;#类型转换&quot; class=&quot;headerlink&quot; title=&quot;类型转换&quot;&gt;&lt;/a&gt;类型转换&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;小转大可以，大转小有时需要强转&lt;/li&gt;
&lt;li&gt;大转小需要强制类型转换&lt;/li&gt;
&lt;/ul&gt;
&lt;figure </summary>
      
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="JavaSe" scheme="http://example.com/tags/JavaSe/"/>
    
  </entry>
  
  <entry>
    <title>搭建博客GitHub+Hexo</title>
    <link href="http://example.com/2021/07/19/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2GitHub-Hexo/"/>
    <id>http://example.com/2021/07/19/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2GitHub-Hexo/</id>
    <published>2021-07-19T05:54:58.000Z</published>
    <updated>2021-07-19T05:55:42.875Z</updated>
    
    <content type="html"><![CDATA[<h1 id="搭建博客详细步骤"><a href="#搭建博客详细步骤" class="headerlink" title="搭建博客详细步骤"></a>搭建博客详细步骤</h1><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>安装完成后 输入node -v 和 npm -v ，如果出现版本好，则安装成功</p><h2 id="添加国内镜像"><a href="#添加国内镜像" class="headerlink" title="添加国内镜像"></a>添加国内镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><ul><li>目的：为了把本地文件上传到GitHub上</li><li>安装：<ul><li>最后一步选择<code>Use Git from the Windows Command Prompt</code>,其余默认</li><li>完成后，命令行输入git –version</li></ul></li></ul><h2 id="注册GitHub账号"><a href="#注册GitHub账号" class="headerlink" title="注册GitHub账号"></a>注册GitHub账号</h2><h2 id="GitHub中"><a href="#GitHub中" class="headerlink" title="GitHub中"></a>GitHub中</h2><ol><li>新建项目 （New repository）</li><li>项目名格式：账号名.github.io（名称一定要与GitHub账号名一致！！！）</li><li>勾选README</li><li>进入Settings,点GitHub Pages，点Choose a theme选主题，分支默认是master，如果自动生成其他分支，除master外都删掉，我搭的时候就因为分支问题而没有正常显示</li></ol><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><ul><li><p>建立博客文件，根据自己意愿找个目录建</p></li><li><p>右键点Git Bash Here</p></li><li><p>输入</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-cli -g</span><br><span class="line">hexo -v//验证是否成功</span><br><span class="line">hexo init</span><br><span class="line">npm install</span><br><span class="line">hexo g//生成静态网页</span><br><span class="line">hexo s//打开本地服务器查看</span><br></pre></td></tr></table></figure><h2 id="连接GitHub与本地"><a href="#连接GitHub与本地" class="headerlink" title="连接GitHub与本地"></a>连接GitHub与本地</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;GitHub名字&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;邮箱&quot;</span></span><br></pre></td></tr></table></figure><ul><li>生成密钥SSH key:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;邮箱&quot;</span></span><br></pre></td></tr></table></figure><ul><li><p>进入GitHub，头像下面的<code>settings </code>，然后<code> SSH and GPG keys</code>新建一个SSH，名字随便</p></li><li><p>打开Git bash</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><ul><li><p>将内容复制到框中，保存</p></li><li><p>输入<code> ssh -T git@github.com</code>出现用户名就成功</p></li><li><p>博客根目录下_config.yml文件，配置相关信息</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: https://github.com/用户名/用户名.github.io</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h2 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h2><ul><li>博客根目录进入git bash</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-deployer-git</span><br></pre></td></tr></table></figure><ul><li><pre><code class="bash">hexo new post &quot;文章标题&quot;</code></pre></li><li><p>在<code>source\_posts</code>目录下就可以看到</p></li><li><p>编辑完后</p><ul><li><p>hexo clean 清理缓存①</p></li><li><p>hexo g 生成静态网页②</p></li><li><p>hexo s 在本地服务器看效果</p></li><li><p>hexo d 上传到GitHub③</p></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;搭建博客详细步骤&quot;&gt;&lt;a href=&quot;#搭建博客详细步骤&quot; class=&quot;headerlink&quot; title=&quot;搭建博客详细步骤&quot;&gt;&lt;/a&gt;搭建博客详细步骤&lt;/h1&gt;&lt;h2 id=&quot;安装Node-js&quot;&gt;&lt;a href=&quot;#安装Node-js&quot; class=&quot;he</summary>
      
    
    
    
    
    <category term="搭建博客" scheme="http://example.com/tags/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
