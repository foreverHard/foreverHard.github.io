<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[sa]]></title>
      <url>/2021/07/19/sa/</url>
      <content type="html"><![CDATA[<h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><h2 id="用法："><a href="#用法：" class="headerlink" title="用法："></a>用法：</h2><p>在容器后面添加<Type>,Type可以是类，抽象类，接口</p>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>表示这种容器只能存放 “ 某个特定的类 ”，其他类存不进去</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;APHero&gt; heros = <span class="keyword">new</span> ArrayList&lt;APHero&gt;();</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//只有APHero可以放进去    </span></span><br><span class="line">    heros.add(<span class="keyword">new</span> APHero());</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//ADHero甚至放不进去</span></span><br><span class="line">    <span class="comment">//heros.add(new ADHero());</span></span><br><span class="line">     </span><br><span class="line">    <span class="comment">//获取的时候也不需要进行转型，因为取出来一定是APHero</span></span><br><span class="line">    APHero apHero =  heros.get(<span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<h2 id="子类对象"><a href="#子类对象" class="headerlink" title="子类对象"></a>子类对象</h2><p>泛型是父类，那么继承该父类的子类都可以放进去，其他类不行</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Hero&gt; heros = <span class="keyword">new</span> ArrayList&lt;Hero&gt;();</span><br><span class="line">       </span><br><span class="line">      <span class="comment">//只有作为Hero的子类可以放进去     </span></span><br><span class="line">      heros.add(<span class="keyword">new</span> APHero());</span><br><span class="line">      heros.add(<span class="keyword">new</span> ADHero());</span><br><span class="line">       </span><br><span class="line">      <span class="comment">//和Hero无关的类型Item还是放不进去</span></span><br><span class="line">      <span class="comment">//heros.add(new Item());</span></span><br></pre></td></tr></table></figure>

<h2 id="泛型简写"><a href="#泛型简写" class="headerlink" title="泛型简写"></a>泛型简写</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Hero&gt; heros = <span class="keyword">new</span> ArrayList&lt;Hero&gt;();</span><br><span class="line">ArrayList&lt;Hero&gt; heros2 = <span class="keyword">new</span> ArrayList&lt;&gt;();<span class="comment">//简写</span></span><br></pre></td></tr></table></figure>



<h2 id="支持泛型的类"><a href="#支持泛型的类" class="headerlink" title="支持泛型的类"></a>支持泛型的类</h2><h3 id="eg1：不支持泛型的Stack"><a href="#eg1：不支持泛型的Stack" class="headerlink" title="eg1：不支持泛型的Stack"></a>eg1：不支持泛型的Stack</h3><p>不支持泛型意思是：某个类只能放Hero，就需要设计一个HeroStack，某个类只能放Item，就需要设计一个ItemStack,里面的方法也只能是特定的类使用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">LinkedList&lt;Hero&gt; heros = <span class="keyword">new</span> LinkedList&lt;Hero&gt;();</span><br><span class="line">      </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Hero h)</span> </span>&#123;</span><br><span class="line">       heros.addLast(h);</span><br><span class="line">   &#125;</span><br><span class="line">  </span><br><span class="line">   <span class="function"><span class="keyword">public</span> Hero <span class="title">pull</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> heros.removeLast();</span><br><span class="line">   &#125;</span><br><span class="line">  </span><br><span class="line">   <span class="function"><span class="keyword">public</span> Hero <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> heros.getLast();</span><br><span class="line">   &#125;</span><br><span class="line">      </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">          </span><br><span class="line">       HeroStack heroStack = <span class="keyword">new</span> HeroStack();</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">           Hero h = <span class="keyword">new</span> Hero(<span class="string">&quot;hero name &quot;</span> + i);</span><br><span class="line">           System.out.println(<span class="string">&quot;压入 hero:&quot;</span> + h);</span><br><span class="line">           heroStack.push(h);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">           Hero h =heroStack.pull();</span><br><span class="line">           System.out.println(<span class="string">&quot;弹出 hero&quot;</span> + h);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



<h3 id="eg2-支持泛型的Stack"><a href="#eg2-支持泛型的Stack" class="headerlink" title="eg2:支持泛型的Stack"></a>eg2:支持泛型的Stack</h3><p>设计一个支持泛型的栈MyStack<br>设计这个类的时候，在类的声明上，加上一个<T>，表示该类支持泛型。<br>T是type的缩写，也可以使用任何其他的合法的变量，比如A,B,X都可以，但是一般约定成俗使用T，代表类型</p>
<blockquote>
<p> 加上T之后该方法就可以被所有泛型使用</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">LinkedList&lt;T&gt; values = <span class="keyword">new</span> LinkedList&lt;T&gt;();</span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">    values.addLast(t);</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">pull</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> values.removeLast();</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> values.getLast();</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//在声明这个Stack的时候，使用泛型&lt;Hero&gt;就表示该Stack只能放Hero</span></span><br><span class="line">    MyStack&lt;Hero&gt; heroStack = <span class="keyword">new</span> MyStack&lt;&gt;();</span><br><span class="line">    heroStack.push(<span class="keyword">new</span> Hero());</span><br><span class="line">    <span class="comment">//不能放Item</span></span><br><span class="line">    heroStack.push(<span class="keyword">new</span> Item());</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//在声明这个Stack的时候，使用泛型&lt;Item&gt;就表示该Stack只能放Item</span></span><br><span class="line">    MyStack&lt;Item&gt; itemStack = <span class="keyword">new</span> MyStack&lt;&gt;();</span><br><span class="line">    itemStack.push(<span class="keyword">new</span> Item());</span><br><span class="line">    <span class="comment">//不能放Hero</span></span><br><span class="line">    itemStack.push(<span class="keyword">new</span> Hero());</span><br></pre></td></tr></table></figure>

<h2 id="泛型通配符"><a href="#泛型通配符" class="headerlink" title="泛型通配符"></a>泛型通配符</h2><ul>
<li><strong>? extends(可取不可插)</strong></li>
</ul>
<p>ArrayList heroList&lt;? extends Hero&gt; 表示这是一个Hero泛型或者其子类泛型<br>heroList 的泛型可能是Hero<br>heroList 的泛型可能是APHero<br>heroList 的泛型可能是ADHero<br>所以 可以确凿的是，<strong>从heroList取出来的对象，一定是可以转型成Hero的</strong></p>
<p>但是，不能往里面放东西，因为<br>放APHero就不满足<ADHero><br>放ADHero又不满足<APHero></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;APHero&gt; apHeroList = <span class="keyword">new</span> ArrayList&lt;APHero&gt;();</span><br><span class="line">      apHeroList.add(<span class="keyword">new</span> APHero());</span><br><span class="line">       </span><br><span class="line">      ArrayList&lt;? extends Hero&gt; heroList = apHeroList;</span><br><span class="line">        </span><br><span class="line">      <span class="comment">//? extends Hero 表示这是一个Hero泛型的子类泛型</span></span><br><span class="line">        </span><br><span class="line">      <span class="comment">//heroList 的泛型可以是Hero</span></span><br><span class="line">      <span class="comment">//heroList 的泛型可以使APHero</span></span><br><span class="line">      <span class="comment">//heroList 的泛型可以使ADHero</span></span><br><span class="line">        </span><br><span class="line">      <span class="comment">//可以确凿的是，从heroList取出来的对象，一定是可以转型成Hero的</span></span><br><span class="line">        </span><br><span class="line">      Hero h= heroList.get(<span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">      <span class="comment">//但是，不能往里面放东西</span></span><br><span class="line">      heroList.add(<span class="keyword">new</span> ADHero()); <span class="comment">//编译错误，因为heroList的泛型 有可能是APHero</span></span><br><span class="line">        </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>? super（可插不可取）</strong></li>
</ul>
<p>ArrayList heroList&lt;? super Hero&gt; 表示这是一个Hero泛型或者其父类泛型<br>heroList的泛型可能是Hero<br>heroList的泛型可能是Object</p>
<p><strong>可以往里面插入Hero以及Hero的子类</strong><br>但是取出来有风险，因为不确定取出来是Hero还是Object</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">   ArrayList&lt;? <span class="keyword">super</span> Hero&gt; heroList = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</span><br><span class="line">      </span><br><span class="line">    <span class="comment">//? super Hero 表示 heroList的泛型是Hero或者其父类泛型</span></span><br><span class="line">      </span><br><span class="line">    <span class="comment">//heroList 的泛型可以是Hero</span></span><br><span class="line">    <span class="comment">//heroList 的泛型可以是Object</span></span><br><span class="line">      </span><br><span class="line">    <span class="comment">//所以就可以插入Hero</span></span><br><span class="line">    heroList.add(<span class="keyword">new</span> Hero());</span><br><span class="line">    <span class="comment">//也可以插入Hero的子类</span></span><br><span class="line">    heroList.add(<span class="keyword">new</span> APHero());</span><br><span class="line">    heroList.add(<span class="keyword">new</span> ADHero());</span><br><span class="line">      </span><br><span class="line">    <span class="comment">//但是，不能从里面取数据出来,因为其泛型可能是Object,而Object是强转Hero会失败</span></span><br><span class="line">    Hero h= heroList.get(<span class="number">0</span>);</span><br><span class="line">      </span><br><span class="line">&#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure>

<ul>
<li><strong>泛型通配符？</strong></li>
</ul>
<p>泛型通配符? 代表任意泛型<br>既然?代表任意泛型，那么换句话说，这个容器什么泛型都有可能</p>
<p>所以只能以Object的形式取出来<br>并且不能往里面放对象，因为不知道到底是一个什么泛型的容器</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;APHero&gt; apHeroList = <span class="keyword">new</span> ArrayList&lt;APHero&gt;();</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//?泛型通配符，表示任意泛型</span></span><br><span class="line">        ArrayList&lt;?&gt; generalList = apHeroList;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//?的缺陷1： 既然?代表任意泛型，那么换句话说，你就不知道这个容器里面是什么类型</span></span><br><span class="line">        <span class="comment">//所以只能以Object的形式取出来</span></span><br><span class="line">        Object o = generalList.get(<span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//?的缺陷2： 既然?代表任意泛型，那么既有可能是Hero,也有可能是Item</span></span><br><span class="line">        <span class="comment">//所以，放哪种对象进去，都有风险，结果就什么什么类型的对象，都不能放进去</span></span><br><span class="line">        generalList.add(<span class="keyword">new</span> Item()); <span class="comment">//编译错误 因为?代表任意泛型，很有可能不是Item</span></span><br><span class="line">        generalList.add(<span class="keyword">new</span> Hero()); <span class="comment">//编译错误 因为?代表任意泛型，很有可能不是Hero</span></span><br><span class="line">        generalList.add(<span class="keyword">new</span> APHero()); <span class="comment">//编译错误  因为?代表任意泛型，很有可能不是APHero</span></span><br><span class="line">  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="泛型转化"><a href="#泛型转化" class="headerlink" title="泛型转化"></a>泛型转化</h2><h3 id="对象转型"><a href="#对象转型" class="headerlink" title="对象转型"></a>对象转型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Hero h = <span class="keyword">new</span> Hero();</span><br><span class="line">ADHero ad = <span class="keyword">new</span> ADHero();</span><br><span class="line"><span class="comment">//子类转父类(不能转型)</span></span><br><span class="line">h = ad;</span><br></pre></td></tr></table></figure>

<h3 id="子类泛型转父类泛型（不能转型）"><a href="#子类泛型转父类泛型（不能转型）" class="headerlink" title="子类泛型转父类泛型（不能转型）"></a>子类泛型转父类泛型（不能转型）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> ArrayList&lt;Hero&gt; hs =<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"> ArrayList&lt;ADHero&gt; adhs =<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"> </span><br><span class="line"><span class="comment">//子类泛型转父类泛型</span></span><br><span class="line">hs = adhs;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Hero&gt; hs =<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       ArrayList&lt;ADHero&gt; adhs =<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//假设能转换成功</span></span><br><span class="line">       hs = adhs;</span><br><span class="line">        </span><br><span class="line">       <span class="comment">//作为Hero泛型的hs,是可以向其中加入APHero的</span></span><br><span class="line">       <span class="comment">//但是hs这个引用，实际上是指向的一个ADHero泛型的容器</span></span><br><span class="line">       <span class="comment">//如果能加进去，就变成了ADHero泛型的容器里放进了APHero，这就矛盾了</span></span><br><span class="line">       hs.add(<span class="keyword">new</span> APHero());</span><br></pre></td></tr></table></figure>

]]></content>
      
        
        <tags>
            
            <tag> JavaStudy </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
